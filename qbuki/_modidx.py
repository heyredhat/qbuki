# Autogenerated by nbdev

d = { 'settings': { 'branch': 'master',
                'doc_baseurl': '/qbuki',
                'doc_host': 'https://heyredhat.github.io',
                'git_url': 'https://github.com/heyredhat/qbuki',
                'lib_path': 'qbuki'},
  'syms': { 'qbuki.factorize': { 'qbuki.factorize.full_rank_factorization': ( 'factorize.html#full_rank_factorization',
                                                                              'qbuki/factorize.py')},
            'qbuki.gpt': { 'qbuki.gpt.GPT': ('gpt.html#gpt', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPT.__init__': ('gpt.html#gpt.__init__', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPT.from_probability_table': ('gpt.html#gpt.from_probability_table', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPT.sample_logical_measurement': ('gpt.html#gpt.sample_logical_measurement', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPT.sample_logical_states': ('gpt.html#gpt.sample_logical_states', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPT.sample_measurement': ('gpt.html#gpt.sample_measurement', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPT.sample_states': ('gpt.html#gpt.sample_states', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPT.valid_logical_measurement': ('gpt.html#gpt.valid_logical_measurement', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPT.valid_logical_states': ('gpt.html#gpt.valid_logical_states', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPT.valid_measurement': ('gpt.html#gpt.valid_measurement', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPT.valid_states': ('gpt.html#gpt.valid_states', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPTEffects': ('gpt.html#gpteffects', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPTEffects.__add__': ('gpt.html#gpteffects.__add__', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPTEffects.__and__': ('gpt.html#gpteffects.__and__', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPTEffects.__getitem__': ('gpt.html#gpteffects.__getitem__', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPTEffects.__init__': ('gpt.html#gpteffects.__init__', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPTEffects.__invert__': ('gpt.html#gpteffects.__invert__', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPTEffects.__inverted__': ('gpt.html#gpteffects.__inverted__', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPTEffects.__iter__': ('gpt.html#gpteffects.__iter__', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPTEffects.__len__': ('gpt.html#gpteffects.__len__', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPTEffects.__lshift__': ('gpt.html#gpteffects.__lshift__', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPTEffects.__mod__': ('gpt.html#gpteffects.__mod__', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPTEffects.__mul__': ('gpt.html#gpteffects.__mul__', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPTEffects.__or__': ('gpt.html#gpteffects.__or__', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPTEffects.__rmul__': ('gpt.html#gpteffects.__rmul__', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPTEffects.__setitem__': ('gpt.html#gpteffects.__setitem__', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPTEffects.__truediv__': ('gpt.html#gpteffects.__truediv__', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPTEffects.dim': ('gpt.html#gpteffects.dim', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPTStates': ('gpt.html#gptstates', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPTStates.__add__': ('gpt.html#gptstates.__add__', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPTStates.__and__': ('gpt.html#gptstates.__and__', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPTStates.__getitem__': ('gpt.html#gptstates.__getitem__', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPTStates.__init__': ('gpt.html#gptstates.__init__', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPTStates.__iter__': ('gpt.html#gptstates.__iter__', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPTStates.__len__': ('gpt.html#gptstates.__len__', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPTStates.__lshift__': ('gpt.html#gptstates.__lshift__', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPTStates.__mod__': ('gpt.html#gptstates.__mod__', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPTStates.__mul__': ('gpt.html#gptstates.__mul__', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPTStates.__rmul__': ('gpt.html#gptstates.__rmul__', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPTStates.__rshift__': ('gpt.html#gptstates.__rshift__', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPTStates.__setitem__': ('gpt.html#gptstates.__setitem__', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPTStates.__truediv__': ('gpt.html#gptstates.__truediv__', 'qbuki/gpt.py'),
                           'qbuki.gpt.GPTStates.dim': ('gpt.html#gptstates.dim', 'qbuki/gpt.py'),
                           'qbuki.gpt.dual_halfspace_intersection': ('gpt.html#dual_halfspace_intersection', 'qbuki/gpt.py'),
                           'qbuki.gpt.gpt_full_rank_decomposition': ('gpt.html#gpt_full_rank_decomposition', 'qbuki/gpt.py'),
                           'qbuki.gpt.plot_convex_hull': ('gpt.html#plot_convex_hull', 'qbuki/gpt.py'),
                           'qbuki.gpt.rank_approximation': ('gpt.html#rank_approximation', 'qbuki/gpt.py')},
            'qbuki.grassmannian': { 'qbuki.grassmannian.__antisymmetrize__': ( 'grassmannian.html#__antisymmetrize__',
                                                                               'qbuki/grassmannian.py'),
                                    'qbuki.grassmannian.antisymmetrize': ('grassmannian.html#antisymmetrize', 'qbuki/grassmannian.py'),
                                    'qbuki.grassmannian.kplane_inner_product': ( 'grassmannian.html#kplane_inner_product',
                                                                                 'qbuki/grassmannian.py'),
                                    'qbuki.grassmannian.plucker_basis': ('grassmannian.html#plucker_basis', 'qbuki/grassmannian.py'),
                                    'qbuki.grassmannian.plucker_coordinate': ( 'grassmannian.html#plucker_coordinate',
                                                                               'qbuki/grassmannian.py'),
                                    'qbuki.grassmannian.plucker_coordinates': ( 'grassmannian.html#plucker_coordinates',
                                                                                'qbuki/grassmannian.py'),
                                    'qbuki.grassmannian.plucker_indices': ('grassmannian.html#plucker_indices', 'qbuki/grassmannian.py'),
                                    'qbuki.grassmannian.plucker_inner_product': ( 'grassmannian.html#plucker_inner_product',
                                                                                  'qbuki/grassmannian.py'),
                                    'qbuki.grassmannian.random_grassmannian': ( 'grassmannian.html#random_grassmannian',
                                                                                'qbuki/grassmannian.py'),
                                    'qbuki.grassmannian.standard_grassmannian_form': ( 'grassmannian.html#standard_grassmannian_form',
                                                                                       'qbuki/grassmannian.py')},
            'qbuki.povm_utils': { 'qbuki.povm_utils.coarse_grain': ('povm_utils.html#coarse_grain', 'qbuki/povm_utils.py'),
                                  'qbuki.povm_utils.complete': ('povm_utils.html#complete', 'qbuki/povm_utils.py'),
                                  'qbuki.povm_utils.dilate': ('povm_utils.html#dilate', 'qbuki/povm_utils.py'),
                                  'qbuki.povm_utils.discriminator_povm': ('povm_utils.html#discriminator_povm', 'qbuki/povm_utils.py'),
                                  'qbuki.povm_utils.frame_povm': ('povm_utils.html#frame_povm', 'qbuki/povm_utils.py'),
                                  'qbuki.povm_utils.frame_quantumness': ('povm_utils.html#frame_quantumness', 'qbuki/povm_utils.py'),
                                  'qbuki.povm_utils.implement_povm': ('povm_utils.html#implement_povm', 'qbuki/povm_utils.py'),
                                  'qbuki.povm_utils.minimal_born': ('povm_utils.html#minimal_born', 'qbuki/povm_utils.py'),
                                  'qbuki.povm_utils.minimum_complex_frame_potential': ( 'povm_utils.html#minimum_complex_frame_potential',
                                                                                        'qbuki/povm_utils.py'),
                                  'qbuki.povm_utils.minimum_real_frame_potential': ( 'povm_utils.html#minimum_real_frame_potential',
                                                                                     'qbuki/povm_utils.py'),
                                  'qbuki.povm_utils.sample_from_povm': ('povm_utils.html#sample_from_povm', 'qbuki/povm_utils.py'),
                                  'qbuki.povm_utils.squish': ('povm_utils.html#squish', 'qbuki/povm_utils.py'),
                                  'qbuki.povm_utils.tighten': ('povm_utils.html#tighten', 'qbuki/povm_utils.py'),
                                  'qbuki.povm_utils.vn_povm': ('povm_utils.html#vn_povm', 'qbuki/povm_utils.py'),
                                  'qbuki.povm_utils.weighted_frame_potential': ( 'povm_utils.html#weighted_frame_potential',
                                                                                 'qbuki/povm_utils.py')},
            'qbuki.qplex': { 'qbuki.qplex.__make_surface_constraint__': ('qplex.html#__make_surface_constraint__', 'qbuki/qplex.py'),
                             'qbuki.qplex.add_if_consistent': ('qplex.html#add_if_consistent', 'qbuki/qplex.py'),
                             'qbuki.qplex.add_if_consistent_recursive': ('qplex.html#add_if_consistent_recursive', 'qbuki/qplex.py'),
                             'qbuki.qplex.add_new_point_on_outsphere': ('qplex.html#add_new_point_on_outsphere', 'qbuki/qplex.py'),
                             'qbuki.qplex.consistent': ('qplex.html#consistent', 'qbuki/qplex.py'),
                             'qbuki.qplex.cvx_batch': ('qplex.html#cvx_batch', 'qbuki/qplex.py'),
                             'qbuki.qplex.cvx_qplex_vol': ('qplex.html#cvx_qplex_vol', 'qbuki/qplex.py'),
                             'qbuki.qplex.flatten': ('qplex.html#flatten', 'qbuki/qplex.py'),
                             'qbuki.qplex.in_hull': ('qplex.html#in_hull', 'qbuki/qplex.py'),
                             'qbuki.qplex.john_plex': ('qplex.html#john_plex', 'qbuki/qplex.py'),
                             'qbuki.qplex.mc_batch': ('qplex.html#mc_batch', 'qbuki/qplex.py'),
                             'qbuki.qplex.mc_qplex_vol': ('qplex.html#mc_qplex_vol', 'qbuki/qplex.py'),
                             'qbuki.qplex.mc_qplex_vol_error_bars': ('qplex.html#mc_qplex_vol_error_bars', 'qbuki/qplex.py'),
                             'qbuki.qplex.non_increasing': ('qplex.html#non_increasing', 'qbuki/qplex.py'),
                             'qbuki.qplex.permutations_of': ('qplex.html#permutations_of', 'qbuki/qplex.py'),
                             'qbuki.qplex.qplex_halfspace_intersection': ('qplex.html#qplex_halfspace_intersection', 'qbuki/qplex.py'),
                             'qbuki.qplex.sample_hilbert_qplex': ('qplex.html#sample_hilbert_qplex', 'qbuki/qplex.py'),
                             'qbuki.qplex.sample_qplex': ('qplex.html#sample_qplex', 'qbuki/qplex.py'),
                             'qbuki.qplex.sample_qplex_surface_point': ('qplex.html#sample_qplex_surface_point', 'qbuki/qplex.py'),
                             'qbuki.qplex.tcompare': ('qplex.html#tcompare', 'qbuki/qplex.py'),
                             'qbuki.qplex.tconstraint': ('qplex.html#tconstraint', 'qbuki/qplex.py'),
                             'qbuki.qplex.vol_psic': ('qplex.html#vol_psic', 'qbuki/qplex.py'),
                             'qbuki.qplex.vol_simplex': ('qplex.html#vol_simplex', 'qbuki/qplex.py')},
            'qbuki.quantumness': { 'qbuki.quantumness.decode_norm': ('quantumness.html#decode_norm', 'qbuki/quantumness.py'),
                                   'qbuki.quantumness.jit_pnorm': ('quantumness.html#jit_pnorm', 'qbuki/quantumness.py'),
                                   'qbuki.quantumness.jit_spectral_inverse': ( 'quantumness.html#jit_spectral_inverse',
                                                                               'qbuki/quantumness.py'),
                                   'qbuki.quantumness.min_quantumness': ('quantumness.html#min_quantumness', 'qbuki/quantumness.py'),
                                   'qbuki.quantumness.minimize_frame_potential': ( 'quantumness.html#minimize_frame_potential',
                                                                                   'qbuki/quantumness.py')},
            'qbuki.random': { 'qbuki.random.rand_dm': ('random.html#rand_dm', 'qbuki/random.py'),
                              'qbuki.random.rand_effect': ('random.html#rand_effect', 'qbuki/random.py'),
                              'qbuki.random.rand_ftf': ('random.html#rand_ftf', 'qbuki/random.py'),
                              'qbuki.random.rand_funtf': ('random.html#rand_funtf', 'qbuki/random.py'),
                              'qbuki.random.rand_ginibre': ('random.html#rand_ginibre', 'qbuki/random.py'),
                              'qbuki.random.rand_herm': ('random.html#rand_herm', 'qbuki/random.py'),
                              'qbuki.random.rand_ket': ('random.html#rand_ket', 'qbuki/random.py'),
                              'qbuki.random.rand_ket_hs': ('random.html#rand_ket_hs', 'qbuki/random.py'),
                              'qbuki.random.rand_kraus': ('random.html#rand_kraus', 'qbuki/random.py'),
                              'qbuki.random.rand_povm': ('random.html#rand_povm', 'qbuki/random.py'),
                              'qbuki.random.rand_probs': ('random.html#rand_probs', 'qbuki/random.py'),
                              'qbuki.random.rand_probs_table': ('random.html#rand_probs_table', 'qbuki/random.py'),
                              'qbuki.random.rand_quantum_probs_table': ('random.html#rand_quantum_probs_table', 'qbuki/random.py'),
                              'qbuki.random.rand_stochastic': ('random.html#rand_stochastic', 'qbuki/random.py'),
                              'qbuki.random.rand_unitary': ('random.html#rand_unitary', 'qbuki/random.py'),
                              'qbuki.random.random_born': ('random.html#random_born', 'qbuki/random.py'),
                              'qbuki.random.sample_convex_hull': ('random.html#sample_convex_hull', 'qbuki/random.py')},
            'qbuki.rics': { 'qbuki.rics.circular_shifts': ('rics.html#circular_shifts', 'qbuki/rics.py'),
                            'qbuki.rics.honey_frame': ('rics.html#honey_frame', 'qbuki/rics.py'),
                            'qbuki.rics.icosahedron_frame': ('rics.html#icosahedron_frame', 'qbuki/rics.py'),
                            'qbuki.rics.icosahedron_vertices': ('rics.html#icosahedron_vertices', 'qbuki/rics.py'),
                            'qbuki.rics.mercedes_benz_frame': ('rics.html#mercedes_benz_frame', 'qbuki/rics.py'),
                            'qbuki.rics.petersen_frame': ('rics.html#petersen_frame', 'qbuki/rics.py')},
            'qbuki.sics': { 'qbuki.sics.hoggar_sic_fiducial': ('sics.html#hoggar_sic_fiducial', 'qbuki/sics.py'),
                            'qbuki.sics.hoggar_sic_povm': ('sics.html#hoggar_sic_povm', 'qbuki/sics.py'),
                            'qbuki.sics.sic_fiducial': ('sics.html#sic_fiducial', 'qbuki/sics.py'),
                            'qbuki.sics.sic_frame': ('sics.html#sic_frame', 'qbuki/sics.py'),
                            'qbuki.sics.sic_povm': ('sics.html#sic_povm', 'qbuki/sics.py')},
            'qbuki.simplex_embedding': { 'qbuki.simplex_embedding.bloch_transform': ( 'simplexembedding.html#bloch_transform',
                                                                                      'qbuki/simplex_embedding.py'),
                                         'qbuki.simplex_embedding.boxworld_gpt': ( 'simplexembedding.html#boxworld_gpt',
                                                                                   'qbuki/simplex_embedding.py'),
                                         'qbuki.simplex_embedding.dualize_effects': ( 'simplexembedding.html#dualize_effects',
                                                                                      'qbuki/simplex_embedding.py'),
                                         'qbuki.simplex_embedding.dualize_states': ( 'simplexembedding.html#dualize_states',
                                                                                     'qbuki/simplex_embedding.py'),
                                         'qbuki.simplex_embedding.example1_gpt': ( 'simplexembedding.html#example1_gpt',
                                                                                   'qbuki/simplex_embedding.py'),
                                         'qbuki.simplex_embedding.example2_gpt': ( 'simplexembedding.html#example2_gpt',
                                                                                   'qbuki/simplex_embedding.py'),
                                         'qbuki.simplex_embedding.first_pass_simplex_embedding': ( 'simplexembedding.html#first_pass_simplex_embedding',
                                                                                                   'qbuki/simplex_embedding.py'),
                                         'qbuki.simplex_embedding.hilbert_to_gpt': ( 'simplexembedding.html#hilbert_to_gpt',
                                                                                     'qbuki/simplex_embedding.py'),
                                         'qbuki.simplex_embedding.interior_point': ( 'simplexembedding.html#interior_point',
                                                                                     'qbuki/simplex_embedding.py'),
                                         'qbuki.simplex_embedding.mub_gpt': ('simplexembedding.html#mub_gpt', 'qbuki/simplex_embedding.py'),
                                         'qbuki.simplex_embedding.plot_halfspaces': ( 'simplexembedding.html#plot_halfspaces',
                                                                                      'qbuki/simplex_embedding.py'),
                                         'qbuki.simplex_embedding.polygonal_gpt': ( 'simplexembedding.html#polygonal_gpt',
                                                                                    'qbuki/simplex_embedding.py'),
                                         'qbuki.simplex_embedding.polygonal_states': ( 'simplexembedding.html#polygonal_states',
                                                                                       'qbuki/simplex_embedding.py'),
                                         'qbuki.simplex_embedding.quick_plot_3d_pts': ( 'simplexembedding.html#quick_plot_3d_pts',
                                                                                        'qbuki/simplex_embedding.py'),
                                         'qbuki.simplex_embedding.rand_classical_gpt': ( 'simplexembedding.html#rand_classical_gpt',
                                                                                         'qbuki/simplex_embedding.py'),
                                         'qbuki.simplex_embedding.rand_quantum_gpt': ( 'simplexembedding.html#rand_quantum_gpt',
                                                                                       'qbuki/simplex_embedding.py'),
                                         'qbuki.simplex_embedding.sic_gpt': ('simplexembedding.html#sic_gpt', 'qbuki/simplex_embedding.py'),
                                         'qbuki.simplex_embedding.simplex_embedding': ( 'simplexembedding.html#simplex_embedding',
                                                                                        'qbuki/simplex_embedding.py'),
                                         'qbuki.simplex_embedding.simplicial_embedding': ( 'simplexembedding.html#simplicial_embedding',
                                                                                           'qbuki/simplex_embedding.py'),
                                         'qbuki.simplex_embedding.tinyfier': ( 'simplexembedding.html#tinyfier',
                                                                               'qbuki/simplex_embedding.py')},
            'qbuki.spin': { 'qbuki.spin._factorial_div': ('spin.html#_factorial_div', 'qbuki/spin.py'),
                            'qbuki.spin._factorial_prod': ('spin.html#_factorial_prod', 'qbuki/spin.py'),
                            'qbuki.spin._to_long': ('spin.html#_to_long', 'qbuki/spin.py'),
                            'qbuki.spin.cartesian_to_spherical': ('spin.html#cartesian_to_spherical', 'qbuki/spin.py'),
                            'qbuki.spin.check_1anticoherence': ('spin.html#check_1anticoherence', 'qbuki/spin.py'),
                            'qbuki.spin.clebsch': ('spin.html#clebsch', 'qbuki/spin.py'),
                            'qbuki.spin.coherent_plane': ('spin.html#coherent_plane', 'qbuki/spin.py'),
                            'qbuki.spin.expect_xyz': ('spin.html#expect_xyz', 'qbuki/spin.py'),
                            'qbuki.spin.find_1anticoherent_subspace': ('spin.html#find_1anticoherent_subspace', 'qbuki/spin.py'),
                            'qbuki.spin.first_nonzero_in_multipole_expansion': ( 'spin.html#first_nonzero_in_multipole_expansion',
                                                                                 'qbuki/spin.py'),
                            'qbuki.spin.holonomy': ('spin.html#holonomy', 'qbuki/spin.py'),
                            'qbuki.spin.integer': ('spin.html#integer', 'qbuki/spin.py'),
                            'qbuki.spin.lower_until_zero': ('spin.html#lower_until_zero', 'qbuki/spin.py'),
                            'qbuki.spin.majorana_polynomial': ('spin.html#majorana_polynomial', 'qbuki/spin.py'),
                            'qbuki.spin.majorana_roots': ('spin.html#majorana_roots', 'qbuki/spin.py'),
                            'qbuki.spin.majorana_stars': ('spin.html#majorana_stars', 'qbuki/spin.py'),
                            'qbuki.spin.multipole_expansion': ('spin.html#multipole_expansion', 'qbuki/spin.py'),
                            'qbuki.spin.number_of_principal_stars': ('spin.html#number_of_principal_stars', 'qbuki/spin.py'),
                            'qbuki.spin.plane_to_sphere': ('spin.html#plane_to_sphere', 'qbuki/spin.py'),
                            'qbuki.spin.principle_constellation_polynomial': ( 'spin.html#principle_constellation_polynomial',
                                                                               'qbuki/spin.py'),
                            'qbuki.spin.projective_roots': ('spin.html#projective_roots', 'qbuki/spin.py'),
                            'qbuki.spin.projective_stars': ('spin.html#projective_stars', 'qbuki/spin.py'),
                            'qbuki.spin.qmatrix': ('spin.html#qmatrix', 'qbuki/spin.py'),
                            'qbuki.spin.rot_holonomy': ('spin.html#rot_holonomy', 'qbuki/spin.py'),
                            'qbuki.spin.rotate': ('spin.html#rotate', 'qbuki/spin.py'),
                            'qbuki.spin.sigma_minus': ('spin.html#sigma_minus', 'qbuki/spin.py'),
                            'qbuki.spin.sigma_plus': ('spin.html#sigma_plus', 'qbuki/spin.py'),
                            'qbuki.spin.sigma_x': ('spin.html#sigma_x', 'qbuki/spin.py'),
                            'qbuki.spin.sigma_y': ('spin.html#sigma_y', 'qbuki/spin.py'),
                            'qbuki.spin.sigma_z': ('spin.html#sigma_z', 'qbuki/spin.py'),
                            'qbuki.spin.sign': ('spin.html#sign', 'qbuki/spin.py'),
                            'qbuki.spin.spectator_component': ('spin.html#spectator_component', 'qbuki/spin.py'),
                            'qbuki.spin.spherical_tensor': ('spin.html#spherical_tensor', 'qbuki/spin.py'),
                            'qbuki.spin.spin_basis': ('spin.html#spin_basis', 'qbuki/spin.py'),
                            'qbuki.spin.spin_coherent_representation': ('spin.html#spin_coherent_representation', 'qbuki/spin.py'),
                            'qbuki.spin.spin_coherent_state': ('spin.html#spin_coherent_state', 'qbuki/spin.py'),
                            'qbuki.spin.spin_operator_to_plucker': ('spin.html#spin_operator_to_plucker', 'qbuki/spin.py')},
            'qbuki.utils': { 'qbuki.utils.basis': ('utils.html#basis', 'qbuki/utils.py'),
                             'qbuki.utils.cntrl_permuter': ('utils.html#cntrl_permuter', 'qbuki/utils.py'),
                             'qbuki.utils.fft_matrix': ('utils.html#fft_matrix', 'qbuki/utils.py'),
                             'qbuki.utils.full_rank_decomposition': ('utils.html#full_rank_decomposition', 'qbuki/utils.py'),
                             'qbuki.utils.gellmann_basis': ('utils.html#gellmann_basis', 'qbuki/utils.py'),
                             'qbuki.utils.gram_to_vecs': ('utils.html#gram_to_vecs', 'qbuki/utils.py'),
                             'qbuki.utils.interior_point': ('utils.html#interior_point', 'qbuki/utils.py'),
                             'qbuki.utils.kron': ('utils.html#kron', 'qbuki/utils.py'),
                             'qbuki.utils.normalize': ('utils.html#normalize', 'qbuki/utils.py'),
                             'qbuki.utils.partial_trace_kraus': ('utils.html#partial_trace_kraus', 'qbuki/utils.py'),
                             'qbuki.utils.paulis': ('utils.html#paulis', 'qbuki/utils.py'),
                             'qbuki.utils.perm_matrix': ('utils.html#perm_matrix', 'qbuki/utils.py'),
                             'qbuki.utils.permuter': ('utils.html#permuter', 'qbuki/utils.py'),
                             'qbuki.utils.pnorm': ('utils.html#pnorm', 'qbuki/utils.py'),
                             'qbuki.utils.prime_mubs': ('utils.html#prime_mubs', 'qbuki/utils.py'),
                             'qbuki.utils.reverse_stereographic_projection': ( 'utils.html#reverse_stereographic_projection',
                                                                               'qbuki/utils.py'),
                             'qbuki.utils.spectral_inverse': ('utils.html#spectral_inverse', 'qbuki/utils.py'),
                             'qbuki.utils.state_space_dimension': ('utils.html#state_space_dimension', 'qbuki/utils.py'),
                             'qbuki.utils.stereographic_projection': ('utils.html#stereographic_projection', 'qbuki/utils.py'),
                             'qbuki.utils.upgrade': ('utils.html#upgrade', 'qbuki/utils.py')},
            'qbuki.weyl_heisenberg': { 'qbuki.weyl_heisenberg.clock': ('weyl_heisenberg.html#clock', 'qbuki/weyl_heisenberg.py'),
                                       'qbuki.weyl_heisenberg.discrete_P': ('weyl_heisenberg.html#discrete_p', 'qbuki/weyl_heisenberg.py'),
                                       'qbuki.weyl_heisenberg.discrete_Q': ('weyl_heisenberg.html#discrete_q', 'qbuki/weyl_heisenberg.py'),
                                       'qbuki.weyl_heisenberg.displace': ('weyl_heisenberg.html#displace', 'qbuki/weyl_heisenberg.py'),
                                       'qbuki.weyl_heisenberg.displacement_operators': ( 'weyl_heisenberg.html#displacement_operators',
                                                                                         'qbuki/weyl_heisenberg.py'),
                                       'qbuki.weyl_heisenberg.shift': ('weyl_heisenberg.html#shift', 'qbuki/weyl_heisenberg.py'),
                                       'qbuki.weyl_heisenberg.symplectic_form': ( 'weyl_heisenberg.html#symplectic_form',
                                                                                  'qbuki/weyl_heisenberg.py'),
                                       'qbuki.weyl_heisenberg.weyl_heisenberg_frame': ( 'weyl_heisenberg.html#weyl_heisenberg_frame',
                                                                                        'qbuki/weyl_heisenberg.py'),
                                       'qbuki.weyl_heisenberg.weyl_heisenberg_povm': ( 'weyl_heisenberg.html#weyl_heisenberg_povm',
                                                                                       'qbuki/weyl_heisenberg.py')}}}
